package builder

import (
	"encoding/json"
	"fmt"
	"io/fs"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"

	"gopkg.in/yaml.v3"
)

type config struct {
	sourceFS   fs.FS
	sourcePath string
	guide      *Guide
}

func DefaultConfig() *config {
	return &config{}
}

func Create(opts ...Option) (*Builder, error) {
	var cfg = DefaultConfig()
	for _, opt := range opts {
		opt(cfg)
	}
	return cfg.Build()
}
func (c *config) Build() (*Builder, error) {
	if c.guide == nil {
		return nil, fmt.Errorf("no guide loaded")
	}
	c.guide.TemplateRoot = filepath.Join(c.sourcePath, c.guide.TemplateRoot)
	if len(c.guide.Watermark) == 0 {
		version, _ := fs.ReadFile(c.sourceFS, filepath.Join(c.sourcePath, "version"))
		var vVersion = string(version)
		if len(vVersion) > 0 {
			vVersion = " v" + vVersion
		}
		c.guide.Watermark = fmt.Sprintf("// Code generated by x-crafter%s.\n\n", vVersion)
	}
	return New(c.guide), nil
}

type Option func(*config)

func WithSourceFS(sourceFS fs.FS, sourcePath string) Option {
	return func(c *config) {
		c.sourceFS = sourceFS
		c.sourcePath = sourcePath
	}
}

func WithSourcePath(sourcePath string) Option {
	return func(c *config) {
		c.sourceFS = os.DirFS(sourcePath)
		c.sourcePath = "."
	}
}

func WithGuidePath(guidePath string) Option {
	return func(c *config) {
		var data []byte
		var err error
		if c.sourceFS != nil {
			data, err = fs.ReadFile(c.sourceFS, guidePath)
			if err != nil {
				log.Fatal(err)
			}
		} else {
			data, err = ioutil.ReadFile(guidePath)
			if err != nil {
				log.Fatal(err)
			}
		}

		WithGuideData(data, filepath.Ext(guidePath))(c)
	}
}

func WithGuideData(guideData []byte, ext string) Option {
	return func(c *config) {
		if _, ok := supportedBuildGuide[ext]; !ok {
			log.Fatal("Load a not supported ext")
		}
		var err error
		c.guide, err = loadGuide(guideData, ext)
		if err != nil {
			log.Fatal(err)
		}
	}
}

var supportedBuildGuide = map[string]struct{}{".json": {}, ".yaml": {}, ".yml": {}}

func loadGuide(data []byte, ext string) (*Guide, error) {
	var res = defaultGuide()
	switch ext {
	case ".json":
		if err := json.Unmarshal(data, res); err != nil {
			return nil, err
		}
	case ".yaml":
		fallthrough
	case ".yml":
		if err := yaml.Unmarshal(data, res); err != nil {
			return nil, err
		}
	}
	return res, nil
}
