package builder

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"path/filepath"

	"github.com/spf13/cobra"
	"gopkg.in/yaml.v3"
)

var supportedBuildGuide = map[string]struct{}{".json": {}, ".yaml": {}, ".yml": {}}

func loadGuide(guidePath string) (*Guide, error) {
	var res = defaultGuide()
	if guidePath == "" {
		return nil, fmt.Errorf("empty guide path")
	}
	var ext = filepath.Ext(guidePath)
	if _, ok := supportedBuildGuide[ext]; !ok {
		return nil, fmt.Errorf("not a supported guide ext")
	}

	data, err := ioutil.ReadFile(guidePath)
	if err != nil {
		return nil, err
	}
	switch ext {
	case ".json":
		if err := json.Unmarshal(data, res); err != nil {
			return nil, err
		}
	case ".yaml":
		fallthrough
	case ".yml":
		if err := yaml.Unmarshal(data, res); err != nil {
			return nil, err
		}
	}
	return res, nil
}

func build(source, destination, guidePath string) {
	if len(guidePath) == 0 {
		guidePath = filepath.Join(source, "xbuild.yaml")
	}
	guide, err := loadGuide(guidePath)
	if err != nil {
		log.Fatal("Load build guide error", err)
	}
	guide.TemplateRoot = filepath.Join(source, guide.TemplateRoot)
	if len(guide.Watermark) == 0 {
		version, _ := ioutil.ReadFile(filepath.Join(source, "version"))
		var vVersion = string(version)
		if len(vVersion) > 0 {
			vVersion = " v" + vVersion
		}
		guide.Watermark = fmt.Sprintf("// Code generated by x-crafter%s.\n\n", vVersion)
	}
	var builder = New(guide)
	if err := builder.Execute(destination); err != nil {
		log.Fatal(err)
	}
}

func Command() *cobra.Command {
	var guidePath string
	cmd := &cobra.Command{
		Use:   "build [SOURCE] [DESTINATION]",
		Short: "Using your broken pile to once again craft your thing again",
		Args:  cobra.ExactArgs(2),
		Run: func(cmd *cobra.Command, args []string) {
			var (
				source      = args[0]
				destination = args[1]
			)
			build(source, destination, guidePath)
		},
	}
	cmd.Flags().StringVarP(&guidePath, "guide", "g", "", "The build guide to rebuild project")
	return cmd
}
